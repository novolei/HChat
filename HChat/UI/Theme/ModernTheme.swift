//
//  ModernTheme.swift
//  HChat
//
//  Created by Ryan Liu on 2025/10/21.
//  üé® Áé∞‰ª£ÂåñËÆæËÆ°Á≥ªÁªü - Âèó‰ºòÁßÄËÆæËÆ°ÂêØÂèëÁöÑÂÖ®Êñ∞‰∏ªÈ¢ò
//

import SwiftUI

// MARK: - üé® Áé∞‰ª£Âåñ‰∏ªÈ¢òÁ≥ªÁªü

enum ModernTheme {
    
    // MARK: - üåà ÈÖçËâ≤ÊñπÊ°àÔºàÊüîÂíå„ÄÅÊ∏©ÊöñÔºâ
    
    /// ‰∏ªËÉåÊôØËâ≤ - Ê∏©ÊöñÁöÑÁ±≥Ëâ≤/ÁÅ∞Ëâ≤
    static let primaryBackground = Color(hex: "F5F3F0")
    
    /// Ê¨°Á∫ßËÉåÊôØ - Êõ¥ÊµÖÁöÑÁ±≥Ëâ≤
    static let secondaryBackground = Color(hex: "FDFCFA")
    
    /// Âç°ÁâáËÉåÊôØ - Á∫ØÁôΩ
    static let cardBackground = Color.white
    
    /// Ê∑±Ëâ≤ËÉåÊôØÔºàÁî®‰∫éÊöóÊ®°ÂºèÊàñÁâπÊÆäÂå∫ÂüüÔºâ
    static let darkBackground = Color(hex: "2C2C2E")
    
    // MARK: - üí¨ Ê∂àÊÅØÊ∞îÊ≥°È¢úËâ≤
    
    /// ÊàëÁöÑÊ∂àÊÅØ - ÊüîÂíåÁöÑËìùËâ≤Ê∏êÂèò
    static var myMessageGradient: LinearGradient {
        LinearGradient(
            colors: [
                Color(hex: "6B9BD1"),  // ÊüîÂíåËìù
                Color(hex: "5A8BC4")
            ],
            startPoint: .topLeading,
            endPoint: .bottomTrailing
        )
    }
    
    /// ‰ªñ‰∫∫Ê∂àÊÅØ - ÊµÖÁÅ∞Ëâ≤
    static let otherMessageBackground = Color(hex: "E8E6E3")
    
    /// Á≥ªÁªüÊ∂àÊÅØ - ÊûÅÊµÖÁÅ∞
    static let systemMessageBackground = Color(hex: "F0EFEC")
    
    // MARK: - üéØ Âº∫Ë∞ÉËâ≤ÂíåÁä∂ÊÄÅËâ≤
    
    /// ‰∏ªÂº∫Ë∞ÉËâ≤ - ÊüîÂíåÁöÑËìùËâ≤
    static let accent = Color(hex: "6B9BD1")
    
    /// Ê¨°Á∫ßÂº∫Ë∞ÉËâ≤ - ÊüîÂíåÁöÑÁ¥´Ëâ≤
    static let secondaryAccent = Color(hex: "9B8CD1")
    
    /// ÊàêÂäü/Essential - ÊüîÂíåÁöÑÁªøËâ≤
    static let success = Color(hex: "7FB069")
    
    /// Ë≠¶Âëä/Urgent - ÊüîÂíåÁöÑÊ©ôËâ≤
    static let warning = Color(hex: "E09F3E")
    
    /// ÈîôËØØ/Critical - ÊüîÂíåÁöÑÁ∫¢Ëâ≤
    static let error = Color(hex: "D66853")
    
    /// Blocking - Ê∑±ÁªøËâ≤
    static let blocking = Color(hex: "5F8D4E")
    
    // MARK: - üìù ÊñáÂ≠óÈ¢úËâ≤
    
    /// ‰∏ªÊñáÂ≠ó - Ê∑±ÁÅ∞
    static let primaryText = Color(hex: "2C2C2E")
    
    /// Ê¨°Á∫ßÊñáÂ≠ó - ‰∏≠ÁÅ∞
    static let secondaryText = Color(hex: "6C6C70")
    
    /// ‰∏âÁ∫ßÊñáÂ≠ó - ÊµÖÁÅ∞
    static let tertiaryText = Color(hex: "AEAEB2")
    
    /// Âç†‰ΩçÁ¨¶ÊñáÂ≠ó
    static let placeholderText = Color(hex: "C7C7CC")
    
    /// ÂèçËâ≤ÊñáÂ≠óÔºàÂú®Ê∑±Ëâ≤ËÉåÊôØ‰∏äÔºâ
    static let inverseText = Color.white
    
    // MARK: - üî≤ ËæπÊ°ÜÂíåÂàÜÈöîÁ∫ø
    
    /// ËæπÊ°ÜÈ¢úËâ≤
    static let border = Color(hex: "E5E5EA").opacity(0.5)
    
    /// ÂàÜÈöîÁ∫ø
    static let separator = Color(hex: "D1D1D6").opacity(0.3)
    
    // MARK: - üå´Ô∏è Èò¥ÂΩ±ÔºàÊüîÂíå„ÄÅËá™ÁÑ∂Ôºâ
    
    /// Âç°ÁâáÈò¥ÂΩ±
    static let cardShadow = Color.black.opacity(0.08)
    
    /// ÊÇ¨ÊµÆÈò¥ÂΩ±ÔºàhoverÔºâ
    static let hoverShadow = Color.black.opacity(0.12)
    
    /// Ê∑±Èò¥ÂΩ±
    static let deepShadow = Color.black.opacity(0.15)
    
    // MARK: - üé® Ê∏êÂèòËâ≤
    
    /// ËÉåÊôØÊ∏êÂèòÔºàÂèØÈÄâÔºâ
    static var backgroundGradient: LinearGradient {
        LinearGradient(
            colors: [
                Color(hex: "FDFCFA"),
                Color(hex: "F5F3F0")
            ],
            startPoint: .top,
            endPoint: .bottom
        )
    }
    
    /// Âç°ÁâáÊ∏êÂèò
    static var cardGradient: LinearGradient {
        LinearGradient(
            colors: [
                Color.white,
                Color(hex: "FDFCFA")
            ],
            startPoint: .topLeading,
            endPoint: .bottomTrailing
        )
    }
    
    // MARK: - üî† Â≠ó‰ΩìÁ≥ªÁªü
    
    /// Â§ßÊ†áÈ¢ò
    static let largeTitle = Font.system(.largeTitle, design: .rounded, weight: .bold)
    
    /// Ê†áÈ¢ò1
    static let title1 = Font.system(.title, design: .rounded, weight: .bold)
    
    /// Ê†áÈ¢ò2
    static let title2 = Font.system(.title2, design: .rounded, weight: .semibold)
    
    /// Ê†áÈ¢ò3
    static let title3 = Font.system(.title3, design: .rounded, weight: .semibold)
    
    /// Ê≠£Êñá
    static let body = Font.system(.body, design: .default)
    
    /// Ê≠£ÊñáÔºàÁ≤ó‰ΩìÔºâ
    static let bodyBold = Font.system(.body, design: .default, weight: .semibold)
    
    /// Â∞èÊ†áÈ¢ò
    static let callout = Font.system(.callout, design: .default)
    
    /// Ê¨°Ë¶ÅÊñáÂ≠ó
    static let subheadline = Font.system(.subheadline, design: .default)
    
    /// ËÑöÊ≥®
    static let footnote = Font.system(.footnote, design: .default)
    
    /// ËØ¥ÊòéÊñáÂ≠ó
    static let caption = Font.system(.caption, design: .default)
    
    /// Á≠âÂÆΩÂ≠ó‰Ωì
    static let monospaced = Font.system(.body, design: .monospaced)
    
    // MARK: - üìê ÂúÜËßíÁ≥ªÁªü
    
    /// Ë∂ÖÂ∞èÂúÜËßí
    static let tinyRadius: CGFloat = 6
    
    /// Â∞èÂúÜËßí
    static let smallRadius: CGFloat = 10
    
    /// ‰∏≠ÂúÜËßí
    static let mediumRadius: CGFloat = 16
    
    /// Â§ßÂúÜËßíÔºàÂç°ÁâáÔºâ
    static let largeRadius: CGFloat = 20
    
    /// Ë∂ÖÂ§ßÂúÜËßí
    static let extraLargeRadius: CGFloat = 28
    
    /// Ê∂àÊÅØÊ∞îÊ≥°ÂúÜËßí
    static let bubbleRadius: CGFloat = 20
    
    // MARK: - üìè Èó¥Ë∑ùÁ≥ªÁªü
    
    /// Ë∂ÖÂ∞èÈó¥Ë∑ù
    static let spacing1: CGFloat = 4
    
    /// Â∞èÈó¥Ë∑ù
    static let spacing2: CGFloat = 8
    
    /// ‰∏≠Â∞èÈó¥Ë∑ù
    static let spacing3: CGFloat = 12
    
    /// ‰∏≠Èó¥Ë∑ù
    static let spacing4: CGFloat = 16
    
    /// Â§ßÈó¥Ë∑ù
    static let spacing5: CGFloat = 20
    
    /// Ë∂ÖÂ§ßÈó¥Ë∑ù
    static let spacing6: CGFloat = 24
    
    /// ÁâπÂ§ßÈó¥Ë∑ù
    static let spacing7: CGFloat = 32
    
    // MARK: - üé≠ Âä®ÁîªÁ≥ªÁªü
    
    /// Âø´ÈÄüÂä®Áîª
    static let quickAnimation = Animation.easeOut(duration: 0.15)
    
    /// Ê†áÂáÜÂä®Áîª
    static let standardAnimation = Animation.easeInOut(duration: 0.25)
    
    /// ÊÖ¢Âä®Áîª
    static let slowAnimation = Animation.easeInOut(duration: 0.35)
    
    /// ÂºπÁ∞ßÂä®ÁîªÔºàËΩªÔºâ
    static let lightSpring = Animation.spring(response: 0.25, dampingFraction: 0.7)
    
    /// ÂºπÁ∞ßÂä®ÁîªÔºàÊ†áÂáÜÔºâ
    static let standardSpring = Animation.spring(response: 0.35, dampingFraction: 0.7)
    
    /// ÂºπÁ∞ßÂä®ÁîªÔºàÈáçÔºâ
    static let heavySpring = Animation.spring(response: 0.45, dampingFraction: 0.65)
    
    // MARK: - üé® Ê†áÁ≠æÈ¢úËâ≤
    
    struct TagColors {
        static let essential = Color(hex: "7FB069")
        static let urgent = Color(hex: "E09F3E")
        static let blocking = Color(hex: "5F8D4E")
        static let normal = Color(hex: "AEAEB2")
    }
    
    // MARK: - üìä ‰ºòÂÖàÁ∫ßÈ¢úËâ≤
    
    struct PriorityColors {
        static let high = Color(hex: "E09F3E")
        static let medium = Color(hex: "6B9BD1")
        static let low = Color(hex: "AEAEB2")
    }
}

// MARK: - üõ†Ô∏è ËæÖÂä©Êâ©Â±ï

extension Color {
    /// ‰ªéÂçÅÂÖ≠ËøõÂà∂Â≠óÁ¨¶‰∏≤ÂàõÂª∫È¢úËâ≤
    init(hex: String) {
        let hex = hex.trimmingCharacters(in: CharacterSet.alphanumerics.inverted)
        var int: UInt64 = 0
        Scanner(string: hex).scanHexInt64(&int)
        let a, r, g, b: UInt64
        switch hex.count {
        case 3: // RGB (12-bit)
            (a, r, g, b) = (255, (int >> 8) * 17, (int >> 4 & 0xF) * 17, (int & 0xF) * 17)
        case 6: // RGB (24-bit)
            (a, r, g, b) = (255, int >> 16, int >> 8 & 0xFF, int & 0xFF)
        case 8: // ARGB (32-bit)
            (a, r, g, b) = (int >> 24, int >> 16 & 0xFF, int >> 8 & 0xFF, int & 0xFF)
        default:
            (a, r, g, b) = (255, 0, 0, 0)
        }
        self.init(
            .sRGB,
            red: Double(r) / 255,
            green: Double(g) / 255,
            blue: Double(b) / 255,
            opacity: Double(a) / 255
        )
    }
}

// MARK: - üé¥ Áé∞‰ª£ÂåñÂç°Áâá‰øÆÈ•∞Á¨¶

struct ModernCardModifier: ViewModifier {
    var padding: CGFloat = ModernTheme.spacing4
    var backgroundColor: Color = ModernTheme.cardBackground
    var shadowRadius: CGFloat = 10
    
    func body(content: Content) -> some View {
        content
            .padding(padding)
            .background(backgroundColor)
            .clipShape(RoundedRectangle(cornerRadius: ModernTheme.largeRadius, style: .continuous))
            .shadow(color: ModernTheme.cardShadow, radius: shadowRadius, x: 0, y: 4)
    }
}

extension View {
    /// Â∫îÁî®Áé∞‰ª£ÂåñÂç°ÁâáÊ†∑Âºè
    func modernCard(
        padding: CGFloat = ModernTheme.spacing4,
        backgroundColor: Color = ModernTheme.cardBackground,
        shadowRadius: CGFloat = 10
    ) -> some View {
        self.modifier(ModernCardModifier(
            padding: padding,
            backgroundColor: backgroundColor,
            shadowRadius: shadowRadius
        ))
    }
}

// MARK: - üè∑Ô∏è Ê†áÁ≠æÊ†∑Âºè

struct ModernTag: View {
    let text: String
    let color: Color
    
    var body: some View {
        Text(text)
            .font(ModernTheme.caption)
            .fontWeight(.medium)
            .foregroundColor(.white)
            .padding(.horizontal, 10)
            .padding(.vertical, 4)
            .background(
                Capsule()
                    .fill(color)
            )
    }
}

